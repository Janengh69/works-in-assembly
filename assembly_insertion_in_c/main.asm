; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26730.0 

	TITLE	C:\3semestr\SP\Lab2Assem\Lab2Assem\main.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__320E01E0_corecrt_stdio_config@h DB 01H
__BAC7FC50_corecrt_wstdio@h DB 01H
__A3797CDC_stdio@h DB 01H
__90701A18_corecrt_wtime@h DB 01H
__42C6E78E_time@h DB 01H
__A02346B9_main@c DB 01H
msvcjmc	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_main
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0P@FCBMJNEB@?5Old?5array?3?5?6?5@		; `string'
PUBLIC	??_C@_04LFKKDPLE@?5?$CFd?5@			; `string'
PUBLIC	??_C@_0BA@PMNLLLEN@?6?5New?5array?3?5?6?5@	; `string'
PUBLIC	??_C@_0CP@MCGLEABG@?6Time?5of?5work?5of?5programm?5with?5@ ; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__getchar:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__clock:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CP@MCGLEABG@?6Time?5of?5work?5of?5programm?5with?5@
CONST	SEGMENT
??_C@_0CP@MCGLEABG@?6Time?5of?5work?5of?5programm?5with?5@ DB 0aH, 'Time '
	DB	'of work of programm with assembler %d ms', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PMNLLLEN@?6?5New?5array?3?5?6?5@
CONST	SEGMENT
??_C@_0BA@PMNLLLEN@?6?5New?5array?3?5?6?5@ DB 0aH, ' New array: ', 0aH, ' '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04LFKKDPLE@?5?$CFd?5@
CONST	SEGMENT
??_C@_04LFKKDPLE@?5?$CFd?5@ DB ' %d ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FCBMJNEB@?5Old?5array?3?5?6?5@
CONST	SEGMENT
??_C@_0P@FCBMJNEB@?5Old?5array?3?5?6?5@ DB ' Old array: ', 0aH, ' ', 00H ; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\3semestr\sp\lab2assem\lab2assem\main.c
;	COMDAT _main
_TEXT	SEGMENT
_j$1 = -112						; size = 4
_j$2 = -100						; size = 4
_arr$ = -88						; size = 32
_d$ = -48						; size = 4
_i$ = -36						; size = 4
_cl$ = -24						; size = 4
_a$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 6    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 7    : 	short a = 0;

	xor	eax, eax
	mov	WORD PTR _a$[ebp], ax

; 8    : 	int cl = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cl$[ebp], eax

; 9    : 	int i = 7;

	mov	DWORD PTR _i$[ebp], 7

; 10   : 	int d = 1;

	mov	DWORD PTR _d$[ebp], 1

; 11   : 	int arr[8];
; 12   : 
; 13   : 	printf(" Old array: \n ");

	push	OFFSET ??_C@_0P@FCBMJNEB@?5Old?5array?3?5?6?5@
	call	_printf
	add	esp, 4

; 14   : 	for (int j = 0; j < 8; j++) {

	mov	DWORD PTR _j$2[ebp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR _j$2[ebp]
	add	eax, 1
	mov	DWORD PTR _j$2[ebp], eax
$LN4@main:
	cmp	DWORD PTR _j$2[ebp], 8
	jge	SHORT $LN3@main

; 15   : 		arr[j] = j;

	mov	eax, DWORD PTR _j$2[ebp]
	mov	ecx, DWORD PTR _j$2[ebp]
	mov	DWORD PTR _arr$[ebp+eax*4], ecx

; 16   : 		printf(" %d ", arr[j]);

	mov	eax, DWORD PTR _j$2[ebp]
	mov	ecx, DWORD PTR _arr$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_04LFKKDPLE@?5?$CFd?5@
	call	_printf
	add	esp, 8

; 17   : 	}

	jmp	SHORT $LN2@main
$LN3@main:
$LN1main$12:

; 18   : 	_asm {
; 19   : 	LN1main:
; 20   : 		//d = i % i
; 21   : 		movsx eax, DWORD PTR i

	movsx	eax, BYTE PTR _i$[ebp]

; 22   : 			shr eax, 1

	shr	eax, 1

; 23   : 			// if ( d == 0)
; 24   : 			jc SHORT LN2main

	jb	SHORT $LN2main$13

; 25   : 			movsx eax, BYTE PTR i

	movsx	eax, BYTE PTR _i$[ebp]

; 26   : 			mov ecx, DWORD PTR i

	mov	ecx, DWORD PTR _i$[ebp]

; 27   : 			mov DWORD PTR arr[ecx * 4], eax

	mov	DWORD PTR _arr$[ebp+ecx*4], eax

; 28   : 			jmp SHORT LN3main

	jmp	SHORT $LN3main$14
$LN2main$13:

; 29   : 			//arr[i] = - i
; 30   : 
; 31   : 			LN2main :
; 32   : 		// arr[i] = i 
; 33   : 		mov ebx, 0

	mov	ebx, 0

; 34   : 			sub ebx, i

	sub	ebx, DWORD PTR _i$[ebp]

; 35   : 			movsx eax, ebx

	movsx	eax, bl

; 36   : 			mov ecx, DWORD PTR i

	mov	ecx, DWORD PTR _i$[ebp]

; 37   : 			mov DWORD PTR arr[ecx * 4], eax

	mov	DWORD PTR _arr$[ebp+ecx*4], eax
$LN3main$14:

; 38   : 
; 39   : 			LN3main :
; 40   : 		//i--;
; 41   : 		mov eax, DWORD PTR i

	mov	eax, DWORD PTR _i$[ebp]

; 42   : 			sub eax, 1

	sub	eax, 1

; 43   : 			mov DWORD PTR i, eax

	mov	DWORD PTR _i$[ebp], eax

; 44   : 			// while (i >= 0)
; 45   : 			cmp DWORD PTR i, 0

	cmp	DWORD PTR _i$[ebp], 0

; 46   : 			jge SHORT LN1main//hz

	jge	SHORT $LN1main$12

; 47   : 	}
; 48   : 
; 49   : 	printf("\n New array: \n ");

	push	OFFSET ??_C@_0BA@PMNLLLEN@?6?5New?5array?3?5?6?5@
	call	_printf
	add	esp, 4

; 50   : 	for (int j = 0; j < 8; j++) {

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN7@main
$LN5@main:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN7@main:
	cmp	DWORD PTR _j$1[ebp], 8
	jge	SHORT $LN6@main

; 51   : 		printf(" %d ", arr[j]);

	mov	eax, DWORD PTR _j$1[ebp]
	mov	ecx, DWORD PTR _arr$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_04LFKKDPLE@?5?$CFd?5@
	call	_printf
	add	esp, 8

; 52   : 	}

	jmp	SHORT $LN5@main
$LN6@main:

; 53   : 
; 54   : 	printf("\nTime of work of programm with assembler %d ms", clock() - cl);

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR _cl$[ebp]
	push	eax
	push	OFFSET ??_C@_0CP@MCGLEABG@?6Time?5of?5work?5of?5programm?5with?5@
	call	_printf
	add	esp, 8

; 55   : 	cl = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cl$[ebp], eax

; 56   : 	getchar();

	mov	esi, esp
	call	DWORD PTR __imp__getchar
	cmp	esi, esp
	call	__RTC_CheckEsp

; 57   : 	return 0;

	xor	eax, eax

; 58   : 
; 59   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@main:
	DD	1
	DD	$LN10@main
$LN10@main:
	DD	-88					; ffffffa8H
	DD	32					; 00000020H
	DD	$LN9@main
$LN9@main:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A3797CDC_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	esi, esp
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 961  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A3797CDC_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 644  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 85   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __320E01E0_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
